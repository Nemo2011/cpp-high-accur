// haa.h - High Accuracy Algorithm
// By Nemo, 2022.10.05
// MIT License
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
#define MAX_SIZE 10000
#define __MAX_SIZE MAX_SIZE + 5
namespace haa{struct BigINT{int __num[__MAX_SIZE];BigINT(string s = ""){for (int i = 0; i < __MAX_SIZE; i++){__num[i] = 0;}__num[0] = s.length();for (int i = 1; i <= s.length(); i++){__num[i] = s[__num[0] - i] - '0';}if (s == "") {__num[0] = 1;__num[1] = 0;}}void clear(){for (int i = 0; i < __MAX_SIZE; i++){__num[i] = 0;}}int length(){return __num[0];}void print_line(){for (int i = __num[0]; i >= 1; i--){cout << __num[i];}cout << endl;}void put_line(){clear();string s;cin >> s;__num[0] = s.length();for (int i = 1; i <= s.length(); i++){__num[i] = s[__num[0] - i] - '0';}}string stringify(){string s = "";for (int i = __num[0]; i >= 1; i--){s = s + (char)(__num[i] + '0');}return s;}long long long_long(){long long l = 0;long long val = 1;for (int i = 1; i <= length(); i++){l += val * __num[i];val *= 10;}return l;}BigINT copy(){return BigINT(to_string(long_long()));}BigINT plus(BigINT a){BigINT b;int m = max(length(), a.length());for (int i = 1; i <= m; i++){b.__num[i] += __num[i] + a.__num[i];b.__num[i + 1] += b.__num[i] / 10;b.__num[i] = b.__num[i] % 10;}int l = m + 1;while (b.__num[l] == 0 && l > 1){l--;}b.__num[0] = l;return b;}bool big(BigINT a){if (a.length() != length()){return length() > a.length();}for (int i = length(); i >= 1; i--){if (a.__num[i] > __num[i]){return 0;}if (a.__num[i] < __num[i]){return 1;}}return 0;}bool equal(BigINT a){if (a.length() != length()){return 0;}for (int i = 1; i <= length(); i++){if (a.__num[i] != __num[i]){return 0;}}return 1;}BigINT minus(BigINT a){if (big(a) || equal(a)){BigINT result;int self_copy[__MAX_SIZE];self_copy[0] = length();for (int i = 1; i <= length(); i++){self_copy[i] = __num[i];}for (int i = 1; i <= __num[0]; i++){if (__num[i] < a.__num[i]){self_copy[i] += 10;self_copy[i + 1]--;}result.__num[i] = self_copy[i] - a.__num[i];}int l = length();while (result.__num[l] == 0 && l > 1){l--;}result.__num[0] = l;return result;}else{return BigINT();}}BigINT times(BigINT a){BigINT result;for (int i = 1; i <= length(); i++){for (int j = 1; j <= a.length(); j++){result.__num[i + j - 1] += __num[i] * a.__num[j];result.__num[i + j] += result.__num[i + j - 1] / 10;result.__num[i + j - 1] %= 10;}}int l = length() + a.length();while (result.__num[l] == 0 && l > 1){l--;}result.__num[0] = l;return result;}BigINT divide(BigINT a){BigINT result;int l = __num[0] - a.__num[0] + 1;BigINT temp;BigINT self_cpy = copy();for (int i = l; i > 0; i--){temp.clear();for (int j = 1; j <= a.length(); j++){temp.__num[i + j - 1] = a.__num[j];}temp.__num[0] = a.__num[0] + i - 1;while (self_cpy.big(temp) || self_cpy.equal(temp)){result.__num[i]++;self_cpy = self_cpy.minus(temp);}}while (result.__num[l] == 0 && l > 1){l--;}result.__num[0] = l;return result;}BigINT mod(BigINT a){return (minus(divide(a).times(a)));}};BigINT operator+(BigINT a, BigINT b){return a.plus(b);}BigINT operator-(BigINT a, BigINT b){return a.minus(b);}bool operator<(BigINT a, BigINT b){return (!a.big(b)) && (!a.equal(b));}bool operator<=(BigINT a, BigINT b){return !a.big(b);}bool operator>(BigINT a, BigINT b){return a.big(b);}bool operator>=(BigINT a, BigINT b){return a.big(b) || a.equal(b);}bool operator==(BigINT a, BigINT b){return a.equal(b);}BigINT operator*(BigINT a, BigINT b){return a.times(b);}BigINT operator/(BigINT a, BigINT b){return a.divide(b);}BigINT operator%(BigINT a, BigINT b){return a.mod(b);}}